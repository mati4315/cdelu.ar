const axios = require('axios');
require('dotenv').config();

/**
 * Script para probar el sistema de loter√≠a completo
 */

const BASE_URL = process.env.NODE_ENV === 'production' 
  ? 'https://diario.trigamer.xyz' 
  : 'http://localhost:3001';

let adminToken = null;
let userToken = null;

async function testLotterySystem() {
  console.log('üé∞ Iniciando pruebas del sistema de loter√≠a...\n');
  
  try {
    // 1. Login como administrador
    console.log('1Ô∏è‚É£ Iniciando sesi√≥n como administrador...');
    await loginAsAdmin();
    
    // 2. Crear loter√≠a gratuita
    console.log('\n2Ô∏è‚É£ Creando loter√≠a gratuita...');
    const freeLotteryId = await createFreeLottery();
    
    // 3. Crear loter√≠a de pago
    console.log('\n3Ô∏è‚É£ Creando loter√≠a de pago...');
    const paidLotteryId = await createPaidLottery();
    
    // 4. Activar loter√≠as
    console.log('\n4Ô∏è‚É£ Activando loter√≠as...');
    await activateLottery(freeLotteryId);
    await activateLottery(paidLotteryId);
    
    // 5. Login como usuario normal
    console.log('\n5Ô∏è‚É£ Iniciando sesi√≥n como usuario...');
    await loginAsUser();
    
    // 6. Participar en loter√≠a gratuita
    console.log('\n6Ô∏è‚É£ Participando en loter√≠a gratuita...');
    await participateInLottery(freeLotteryId, [1, 5, 10, 15]);
    
    // 7. Participar en loter√≠a de pago
    console.log('\n7Ô∏è‚É£ Participando en loter√≠a de pago...');
    await participateInLottery(paidLotteryId, [2, 7, 12, 18]);
    
    // 8. Ver tickets del usuario
    console.log('\n8Ô∏è‚É£ Verificando tickets del usuario...');
    await viewUserTickets(freeLotteryId);
    await viewUserTickets(paidLotteryId);
    
    // 9. Login como admin y finalizar loter√≠a
    console.log('\n9Ô∏è‚É£ Finalizando loter√≠a como administrador...');
    await loginAsAdmin();
    await finishLottery(freeLotteryId);
    
    // 10. Ver ganadores
    console.log('\nüîü Verificando ganadores...');
    await viewWinners(freeLotteryId);
    
    // 11. Obtener estad√≠sticas
    console.log('\n1Ô∏è‚É£1Ô∏è‚É£ Obteniendo estad√≠sticas...');
    await getLotteryStats();
    
    console.log('\n‚úÖ Todas las pruebas completadas exitosamente!');
    
  } catch (error) {
    console.error('\n‚ùå Error en las pruebas:', error.message);
    if (error.response) {
      console.error('Respuesta del servidor:', error.response.data);
    }
  }
}

async function loginAsAdmin() {
  try {
    const response = await axios.post(`${BASE_URL}/api/v1/auth/login`, {
      username: 'admin',
      password: 'admin123'
    });
    
    adminToken = response.data.token;
    console.log('‚úÖ Login como administrador exitoso');
  } catch (error) {
    throw new Error('Error en login de administrador: ' + error.message);
  }
}

async function loginAsUser() {
  try {
    const response = await axios.post(`${BASE_URL}/api/v1/auth/login`, {
      username: 'usuario',
      password: 'usuario123'
    });
    
    userToken = response.data.token;
    console.log('‚úÖ Login como usuario exitoso');
  } catch (error) {
    throw new Error('Error en login de usuario: ' + error.message);
  }
}

async function createFreeLottery() {
  try {
    const lotteryData = {
      title: 'Loter√≠a Gratuita de Prueba',
      description: 'Loter√≠a gratuita para probar el sistema',
      is_free: true,
      ticket_price: 0,
      min_tickets: 1,
      max_tickets: 50,
      num_winners: 3,
      start_date: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // Ma√±ana
      end_date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // En una semana
      prize_description: 'Premio especial para ganadores',
      terms_conditions: 'T√©rminos y condiciones de prueba'
    };
    
    const response = await axios.post(`${BASE_URL}/api/lotteries`, lotteryData, {
      headers: { Authorization: `Bearer ${adminToken}` }
    });
    
    console.log('‚úÖ Loter√≠a gratuita creada con ID:', response.data.data.id);
    return response.data.data.id;
  } catch (error) {
    throw new Error('Error al crear loter√≠a gratuita: ' + error.message);
  }
}

async function createPaidLottery() {
  try {
    const lotteryData = {
      title: 'Loter√≠a de Pago de Prueba',
      description: 'Loter√≠a de pago para probar el sistema',
      is_free: false,
      ticket_price: 10.50,
      min_tickets: 5,
      max_tickets: 100,
      num_winners: 5,
      start_date: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
      end_date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
      prize_description: 'Premio en efectivo para ganadores',
      terms_conditions: 'T√©rminos y condiciones de prueba para loter√≠a de pago'
    };
    
    const response = await axios.post(`${BASE_URL}/api/lotteries`, lotteryData, {
      headers: { Authorization: `Bearer ${adminToken}` }
    });
    
    console.log('‚úÖ Loter√≠a de pago creada con ID:', response.data.data.id);
    return response.data.data.id;
  } catch (error) {
    throw new Error('Error al crear loter√≠a de pago: ' + error.message);
  }
}

async function activateLottery(lotteryId) {
  try {
    await axios.put(`${BASE_URL}/api/lotteries/${lotteryId}`, {
      status: 'active'
    }, {
      headers: { Authorization: `Bearer ${adminToken}` }
    });
    
    console.log('‚úÖ Loter√≠a activada:', lotteryId);
  } catch (error) {
    throw new Error('Error al activar loter√≠a: ' + error.message);
  }
}

async function participateInLottery(lotteryId, ticketNumbers) {
  try {
    const response = await axios.post(`${BASE_URL}/api/lotteries/${lotteryId}/buy`, {
      ticket_numbers: ticketNumbers
    }, {
      headers: { Authorization: `Bearer ${userToken}` }
    });
    
    console.log('‚úÖ Participaci√≥n exitosa en loter√≠a:', lotteryId);
    console.log('   Tickets comprados:', ticketNumbers);
    console.log('   Respuesta:', response.data.message);
  } catch (error) {
    throw new Error('Error al participar en loter√≠a: ' + error.message);
  }
}

async function viewUserTickets(lotteryId) {
  try {
    const response = await axios.get(`${BASE_URL}/api/lotteries/${lotteryId}/tickets`, {
      headers: { Authorization: `Bearer ${userToken}` }
    });
    
    console.log('‚úÖ Tickets del usuario en loter√≠a:', lotteryId);
    console.log('   Cantidad de tickets:', response.data.data.length);
    response.data.data.forEach(ticket => {
      console.log(`   - Ticket #${ticket.ticket_number} (${ticket.payment_status})`);
    });
  } catch (error) {
    throw new Error('Error al ver tickets del usuario: ' + error.message);
  }
}

async function finishLottery(lotteryId) {
  try {
    const response = await axios.post(`${BASE_URL}/api/lotteries/${lotteryId}/finish`, {}, {
      headers: { Authorization: `Bearer ${adminToken}` }
    });
    
    console.log('‚úÖ Loter√≠a finalizada:', lotteryId);
    console.log('   Estado:', response.data.data.status);
    console.log('   Ganadores:', response.data.data.winners_count);
  } catch (error) {
    throw new Error('Error al finalizar loter√≠a: ' + error.message);
  }
}

async function viewWinners(lotteryId) {
  try {
    const response = await axios.get(`${BASE_URL}/api/lotteries/${lotteryId}/winners`);
    
    console.log('‚úÖ Ganadores de loter√≠a:', lotteryId);
    console.log('   Cantidad de ganadores:', response.data.data.length);
    response.data.data.forEach(winner => {
      console.log(`   - Ticket #${winner.ticket_number} - Usuario: ${winner.username}`);
    });
  } catch (error) {
    throw new Error('Error al ver ganadores: ' + error.message);
  }
}

async function getLotteryStats() {
  try {
    const response = await axios.get(`${BASE_URL}/api/lotteries?limit=100`, {
      headers: { Authorization: `Bearer ${adminToken}` }
    });
    
    const lotteries = response.data.data;
    console.log('‚úÖ Estad√≠sticas del sistema:');
    console.log('   Total de loter√≠as:', lotteries.length);
    console.log('   Loter√≠as activas:', lotteries.filter(l => l.current_status === 'running').length);
    console.log('   Loter√≠as finalizadas:', lotteries.filter(l => l.status === 'finished').length);
    console.log('   Loter√≠as gratuitas:', lotteries.filter(l => l.is_free).length);
    console.log('   Loter√≠as de pago:', lotteries.filter(l => !l.is_free).length);
    
    const totalTickets = lotteries.reduce((sum, l) => sum + (l.tickets_sold || 0), 0);
    console.log('   Total de tickets vendidos:', totalTickets);
  } catch (error) {
    throw new Error('Error al obtener estad√≠sticas: ' + error.message);
  }
}

// Funci√≥n para crear usuarios de prueba si no existen
async function createTestUsers() {
  console.log('üë• Creando usuarios de prueba...');
  
  try {
    // Crear usuario administrador
    await axios.post(`${BASE_URL}/api/v1/auth/register`, {
      username: 'admin',
      password: 'admin123',
      email: 'admin@test.com',
      role: 'admin'
    });
    console.log('‚úÖ Usuario administrador creado');
  } catch (error) {
    if (error.response?.status === 409) {
      console.log('‚ÑπÔ∏è Usuario administrador ya existe');
    } else {
      console.log('‚ö†Ô∏è Error al crear usuario administrador:', error.message);
    }
  }
  
  try {
    // Crear usuario normal
    await axios.post(`${BASE_URL}/api/v1/auth/register`, {
      username: 'usuario',
      password: 'usuario123',
      email: 'usuario@test.com',
      role: 'user'
    });
    console.log('‚úÖ Usuario normal creado');
  } catch (error) {
    if (error.response?.status === 409) {
      console.log('‚ÑπÔ∏è Usuario normal ya existe');
    } else {
      console.log('‚ö†Ô∏è Error al crear usuario normal:', error.message);
    }
  }
}

// Funci√≥n principal
async function main() {
  console.log('üöÄ Iniciando pruebas del sistema de loter√≠a...\n');
  
  // Verificar que el servidor est√© corriendo
  try {
    await axios.get(`${BASE_URL}/health`);
    console.log('‚úÖ Servidor conectado correctamente');
  } catch (error) {
    console.error('‚ùå No se puede conectar al servidor. Aseg√∫rate de que est√© corriendo.');
    console.error('   URL:', BASE_URL);
    process.exit(1);
  }
  
  // Crear usuarios de prueba
  await createTestUsers();
  
  // Ejecutar pruebas
  await testLotterySystem();
}

// Ejecutar si se llama directamente
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå Error fatal:', error.message);
    process.exit(1);
  });
}

module.exports = {
  testLotterySystem,
  createTestUsers
}; 