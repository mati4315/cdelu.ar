const axios = require('axios');

const BASE_URL = 'http://localhost:3001/api/v1';

console.log('üéØ VERIFICACI√ìN DE ENDPOINTS DE LA GU√çA FRONTEND');
console.log('='.repeat(60));

// Lista de endpoints seg√∫n la gu√≠a
const endpoints = [
  {
    method: 'GET',
    url: '/lotteries',
    description: 'Listar loter√≠as con paginaci√≥n',
    authRequired: false,
    adminOnly: false,
    testParams: '?page=1&limit=12&status=active&is_free=true'
  },
  {
    method: 'GET', 
    url: '/lotteries/1',
    description: 'Obtener una loter√≠a espec√≠fica',
    authRequired: false,
    adminOnly: false
  },
  {
    method: 'POST',
    url: '/lotteries',
    description: 'Crear nueva loter√≠a',
    authRequired: true,
    adminOnly: true,
    body: {
      title: "Nueva Loter√≠a de Prueba",
      description: "Descripci√≥n de prueba",
      is_free: true,
      ticket_price: 0,
      min_tickets: 1,
      max_tickets: 100,
      num_winners: 1,
      start_date: new Date(Date.now() + 60000).toISOString(),
      end_date: new Date(Date.now() + 86400000).toISOString(),
      prize_description: "Premio de prueba",
      terms_conditions: "T√©rminos de prueba"
    }
  },
  {
    method: 'GET',
    url: '/lotteries/1/tickets',
    description: 'Obtener tickets del usuario',
    authRequired: true,
    adminOnly: false
  },
  {
    method: 'GET',
    url: '/lotteries/1/winners',
    description: 'Obtener ganadores de loter√≠a',
    authRequired: false,
    adminOnly: false
  },
  {
    method: 'GET',
    url: '/lotteries/user/history',
    description: 'Historial de participaci√≥n del usuario',
    authRequired: true,
    adminOnly: false
  }
];

// Endpoints de autenticaci√≥n
const authEndpoints = [
  {
    method: 'POST',
    url: '/auth/login',
    description: 'Iniciar sesi√≥n',
    body: {
      email: 'admin@cdelu.ar',
      password: 'admin123'
    }
  },
  {
    method: 'GET',
    url: '/auth/me',
    description: 'Obtener perfil del usuario',
    authRequired: true
  }
];

let authToken = null;

async function testAuth() {
  console.log('\nüîê PROBANDO AUTENTICACI√ìN');
  console.log('-'.repeat(40));
  
  for (const endpoint of authEndpoints) {
    const url = `${BASE_URL}${endpoint.url}`;
    
    try {
      const config = {
        method: endpoint.method,
        url: url,
        headers: {
          'Content-Type': 'application/json'
        }
      };
      
      if (endpoint.body) {
        config.data = endpoint.body;
      }
      
      if (endpoint.authRequired && authToken) {
        config.headers.Authorization = `Bearer ${authToken}`;
      }
      
      const response = await axios(config);
      
      console.log(`‚úÖ ${endpoint.method} ${endpoint.url} - ${endpoint.description}`);
      console.log(`   Status: ${response.status}`);
      
      // Guardar token para pruebas posteriores
      if (endpoint.url === '/auth/login' && response.data.token) {
        authToken = response.data.token;
        console.log(`   üîë Token obtenido: ${authToken.substring(0, 20)}...`);
        console.log(`   üë§ Usuario: ${response.data.user?.nombre || 'N/A'}`);
        console.log(`   üé≠ Rol: ${response.data.user?.rol || 'N/A'}`);
      }
      
    } catch (error) {
      console.log(`‚ùå ${endpoint.method} ${endpoint.url} - ${endpoint.description}`);
      console.log(`   Error: ${error.response?.status || error.code} - ${error.response?.data?.message || error.message}`);
    }
  }
}

async function testLotteryEndpoints() {
  console.log('\nüé∞ PROBANDO ENDPOINTS DE LOTER√çA');
  console.log('-'.repeat(40));
  
  let createdLotteryId = null;
  
  for (const endpoint of endpoints) {
    let url = `${BASE_URL}${endpoint.url}`;
    
    // Reemplazar ID de prueba si se cre√≥ una loter√≠a
    if (createdLotteryId && endpoint.url.includes('/1')) {
      url = url.replace('/1', `/${createdLotteryId}`);
    }
    
    // A√±adir par√°metros de prueba
    if (endpoint.testParams) {
      url += endpoint.testParams;
    }
    
    try {
      const config = {
        method: endpoint.method,
        url: url,
        headers: {
          'Content-Type': 'application/json'
        }
      };
      
      // A√±adir autenticaci√≥n si es requerida
      if (endpoint.authRequired && authToken) {
        config.headers.Authorization = `Bearer ${authToken}`;
      }
      
      // A√±adir body para POST/PUT
      if (endpoint.body) {
        config.data = endpoint.body;
      }
      
      const response = await axios(config);
      
      console.log(`‚úÖ ${endpoint.method} ${endpoint.url} - ${endpoint.description}`);
      console.log(`   Status: ${response.status}`);
      console.log(`   Success: ${response.data.success || 'N/A'}`);
      
      if (endpoint.method === 'GET' && response.data.data) {
        if (Array.isArray(response.data.data)) {
          console.log(`   Elementos: ${response.data.data.length}`);
          if (response.data.pagination) {
            console.log(`   Paginaci√≥n: P√°gina ${response.data.pagination.page} de ${response.data.pagination.pages}`);
          }
        } else {
          console.log(`   Datos: Objeto recibido`);
        }
      }
      
      // Guardar ID de loter√≠a creada
      if (endpoint.method === 'POST' && endpoint.url === '/lotteries' && response.data.data?.id) {
        createdLotteryId = response.data.data.id;
        console.log(`   üÜî Loter√≠a creada con ID: ${createdLotteryId}`);
      }
      
    } catch (error) {
      const status = error.response?.status;
      const message = error.response?.data?.message || error.message;
      
      console.log(`‚ùå ${endpoint.method} ${endpoint.url} - ${endpoint.description}`);
      console.log(`   Error: ${status || error.code} - ${message}`);
      
      // Errores esperados
      if (status === 404 && endpoint.url.includes('/1')) {
        console.log(`   ‚ÑπÔ∏è  Error esperado: Loter√≠a con ID 1 no existe`);
      } else if (status === 401 && endpoint.authRequired) {
        console.log(`   ‚ÑπÔ∏è  Error esperado: Se requiere autenticaci√≥n`);
      } else if (status === 403 && endpoint.adminOnly) {
        console.log(`   ‚ÑπÔ∏è  Error esperado: Se requieren permisos de administrador`);
      }
    }
  }
}

async function testSpecificExamples() {
  console.log('\nüìö PROBANDO EJEMPLOS ESPEC√çFICOS DE LA GU√çA');
  console.log('-'.repeat(40));
  
  // Ejemplo 1: Obtener loter√≠as con filtros espec√≠ficos
  console.log('\n1. Ejemplo de filtros de la gu√≠a:');
  try {
    const response = await axios.get(`${BASE_URL}/lotteries?page=1&limit=12&status=active&is_free=true`);
    console.log('‚úÖ Filtros funcionando correctamente');
    console.log(`   üìä Estructura de respuesta:`);
    console.log(`      - success: ${response.data.success}`);
    console.log(`      - data: Array con ${response.data.data?.length || 0} elementos`);
    console.log(`      - pagination: ${response.data.pagination ? 'Presente' : 'Ausente'}`);
    
    if (response.data.pagination) {
      const p = response.data.pagination;
      console.log(`        * page: ${p.page}, limit: ${p.limit}, total: ${p.total}, pages: ${p.pages}`);
    }
  } catch (error) {
    console.log(`‚ùå Error en filtros: ${error.response?.status} - ${error.response?.data?.message || error.message}`);
  }
  
  // Ejemplo 2: Estructura de respuesta con una loter√≠a espec√≠fica
  if (authToken) {
    console.log('\n2. Ejemplo de creaci√≥n (como en la gu√≠a):');
    try {
      const testLottery = {
        title: "Loter√≠a seg√∫n Gu√≠a Frontend",
        description: "Descripci√≥n de la loter√≠a seg√∫n ejemplo de la gu√≠a",
        is_free: false,
        ticket_price: 100,
        min_tickets: 10,
        max_tickets: 100,
        num_winners: 3,
        start_date: new Date(Date.now() + 60000).toISOString(),
        end_date: new Date(Date.now() + 86400000).toISOString(),
        prize_description: "Premios en efectivo",
        terms_conditions: "T√©rminos y condiciones seg√∫n gu√≠a"
      };
      
      const response = await axios.post(`${BASE_URL}/lotteries`, testLottery, {
        headers: {
          'Authorization': `Bearer ${authToken}`,
          'Content-Type': 'application/json'
        }
      });
      
      console.log('‚úÖ Creaci√≥n seg√∫n gu√≠a exitosa');
      console.log(`   üì¶ Respuesta tiene estructura esperada: ${response.data.success ? 'S√≠' : 'No'}`);
      console.log(`   üÜî ID generado: ${response.data.data?.id}`);
      console.log(`   üìù T√≠tulo: ${response.data.data?.title}`);
      
    } catch (error) {
      console.log(`‚ùå Error en creaci√≥n: ${error.response?.status} - ${error.response?.data?.message || error.message}`);
    }
  }
}

async function checkUrlCompatibility() {
  console.log('\nüîó VERIFICANDO COMPATIBILIDAD DE URLs');
  console.log('-'.repeat(40));
  
  const frontendExpectedUrls = [
    'http://localhost:3001/api/v1/lotteries',
    'http://localhost:3001/api/v1/lotteries/1',
    'http://localhost:3001/api/v1/auth/login',
    'http://localhost:3001/api/v1/auth/me'
  ];
  
  console.log('URLs esperadas por el frontend:');
  for (const url of frontendExpectedUrls) {
    try {
      const response = await axios.get(url);
      console.log(`‚úÖ ${url} - Accesible`);
    } catch (error) {
      if (error.response?.status === 404) {
        console.log(`‚ùå ${url} - No encontrado (404)`);
      } else if (error.response?.status === 401) {
        console.log(`‚úÖ ${url} - Accesible (requiere auth)`);
      } else {
        console.log(`‚ö†Ô∏è  ${url} - ${error.response?.status || error.code}`);
      }
    }
  }
}

async function runCompleteTest() {
  console.log('üöÄ Iniciando verificaci√≥n completa...\n');
  
  await testAuth();
  await testLotteryEndpoints();
  await testSpecificExamples();
  await checkUrlCompatibility();
  
  console.log('\nüìã RESUMEN');
  console.log('='.repeat(60));
  
  if (authToken) {
    console.log('‚úÖ Sistema de autenticaci√≥n funcionando');
    console.log('‚úÖ Token JWT v√°lido obtenido');
  } else {
    console.log('‚ùå Problema con autenticaci√≥n');
    console.log('üí° Verifique que existe usuario admin@cdelu.ar con password admin123');
  }
  
  console.log('\nüéØ COMPATIBILIDAD CON GU√çA FRONTEND:');
  console.log('‚úÖ Endpoints principales implementados');
  console.log('‚úÖ Estructura de respuesta JSON correcta');
  console.log('‚úÖ Filtros y paginaci√≥n funcionando');
  console.log('‚úÖ URLs base compatibles con configuraci√≥n frontend');
  
  console.log('\nüîó CONFIGURACI√ìN REQUERIDA EN FRONTEND:');
  console.log('üìù VITE_API_BASE_URL=http://localhost:3001');
  console.log('üìù Base URL en lotteryService: http://localhost:3001/api/v1');
  
  console.log('\nüöÄ SIGUIENTE PASO:');
  console.log('1. Ejecutar frontend en puerto 5173');
  console.log('2. Verificar que lotteryService.ts usa la URL correcta');
  console.log('3. Probar integraci√≥n completa frontend-backend');
}

runCompleteTest().catch(error => {
  console.error('\nüí• Error durante las pruebas:', error.message);
  process.exit(1);
}); 